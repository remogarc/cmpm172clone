//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""cb32d9bb-c5d5-4f08-b23d-64a05d887d64"",
            ""actions"": [
                {
                    ""name"": ""SelectPS5"",
                    ""type"": ""Button"",
                    ""id"": ""1ff05c15-6ae1-47d0-a6a1-541d6c65fea5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EscapePS5"",
                    ""type"": ""Button"",
                    ""id"": ""7fdc6ec9-c7f9-42bb-8dda-41af7c9f4d1f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpPS5"",
                    ""type"": ""Button"",
                    ""id"": ""698edd56-5619-4394-927c-b4f8bfd5365b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintPS5"",
                    ""type"": ""Button"",
                    ""id"": ""cdce6b5c-ef85-4d6e-baee-e9bcb8a098e7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37e9c9da-2ea9-4f55-8d85-b1b50dcef1b0"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPS5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af708feb-f3d5-4686-bf5a-405378d3bd9f"",
                    ""path"": ""<DualShockGamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EscapePS5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30d7492d-6f3f-4036-b664-7f861b417a16"",
                    ""path"": ""<DualShockGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpPS5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c24c12c6-2284-4e15-98b1-d5e18c88e4b8"",
                    ""path"": ""<DualShockGamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintPS5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_SelectPS5 = m_Gameplay.FindAction("SelectPS5", throwIfNotFound: true);
        m_Gameplay_EscapePS5 = m_Gameplay.FindAction("EscapePS5", throwIfNotFound: true);
        m_Gameplay_JumpPS5 = m_Gameplay.FindAction("JumpPS5", throwIfNotFound: true);
        m_Gameplay_SprintPS5 = m_Gameplay.FindAction("SprintPS5", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, PlayerControls.Gameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_SelectPS5;
    private readonly InputAction m_Gameplay_EscapePS5;
    private readonly InputAction m_Gameplay_JumpPS5;
    private readonly InputAction m_Gameplay_SprintPS5;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectPS5 => m_Wrapper.m_Gameplay_SelectPS5;
        public InputAction @EscapePS5 => m_Wrapper.m_Gameplay_EscapePS5;
        public InputAction @JumpPS5 => m_Wrapper.m_Gameplay_JumpPS5;
        public InputAction @SprintPS5 => m_Wrapper.m_Gameplay_SprintPS5;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @SelectPS5.started += instance.OnSelectPS5;
            @SelectPS5.performed += instance.OnSelectPS5;
            @SelectPS5.canceled += instance.OnSelectPS5;
            @EscapePS5.started += instance.OnEscapePS5;
            @EscapePS5.performed += instance.OnEscapePS5;
            @EscapePS5.canceled += instance.OnEscapePS5;
            @JumpPS5.started += instance.OnJumpPS5;
            @JumpPS5.performed += instance.OnJumpPS5;
            @JumpPS5.canceled += instance.OnJumpPS5;
            @SprintPS5.started += instance.OnSprintPS5;
            @SprintPS5.performed += instance.OnSprintPS5;
            @SprintPS5.canceled += instance.OnSprintPS5;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @SelectPS5.started -= instance.OnSelectPS5;
            @SelectPS5.performed -= instance.OnSelectPS5;
            @SelectPS5.canceled -= instance.OnSelectPS5;
            @EscapePS5.started -= instance.OnEscapePS5;
            @EscapePS5.performed -= instance.OnEscapePS5;
            @EscapePS5.canceled -= instance.OnEscapePS5;
            @JumpPS5.started -= instance.OnJumpPS5;
            @JumpPS5.performed -= instance.OnJumpPS5;
            @JumpPS5.canceled -= instance.OnJumpPS5;
            @SprintPS5.started -= instance.OnSprintPS5;
            @SprintPS5.performed -= instance.OnSprintPS5;
            @SprintPS5.canceled -= instance.OnSprintPS5;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnSelectPS5(InputAction.CallbackContext context);
        void OnEscapePS5(InputAction.CallbackContext context);
        void OnJumpPS5(InputAction.CallbackContext context);
        void OnSprintPS5(InputAction.CallbackContext context);
    }
}
